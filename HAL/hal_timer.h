#ifndef _VIRTUAL_OS_HAL_TIMER_H
#define _VIRTUAL_OS_HAL_TIMER_H

#include "hal_exti.h"
#include <stdint.h>

//GD32中1,2,5,6,8,11,可用
typedef enum {
	HAL_TIMER_ID0,
	HAL_TIMER_ID1,
	HAL_TIMER_ID2,
	HAL_TIMER_ID3,
	HAL_TIMER_ID4,
	HAL_TIMER_ID5,
	HAL_TIMER_ID6,
	HAL_TIMER_ID7,
	HAL_TIMER_ID8,
	HAL_TIMER_ID9,
	HAL_TIMER_ID10,
	HAL_TIMER_ID11,
	HAL_TIMER_ID12,
} HAL_TIMER_ID_E;

typedef enum {
	HAL_TIMER_MODE_EDGE,
	HAL_TIMER_MODE_CENTER_DOWN,
	HAL_TIMER_MODE_CENTER_UP,
	HAL_TIMER_MODECENTER_BOTH,
} HAL_TIMER_ALIGH_MODE_E;

typedef enum {
	HAL_TIMER_CNT_DIR_UP,
	HAL_TIMER_CNT_DIR_DOWN,
} HAL_TIMER_CNT_DIR_E;

typedef enum {
	HAL_TIMER_CLK_DIV_1,
	HAL_TIMER_CLK_DIV_2,
	HAL_TIMER_CLK_DIV_4,
} HAL_TIMER_CLK_DIV_E;

typedef enum {
	HAL_TIMER_IT_MODE_UPDATE,
	HAL_TIMER_IT_MODE_CH0,
	HAL_TIMER_IT_MODE_CH1,
	HAL_TIMER_IT_MODE_CH2,
	HAL_TIMER_IT_MODE_CH3,
	HAL_TIMER_IT_MODE_SEAT, //占位方便解析，无意义
	HAL_TIMER_IT_MODE_TRG,
} HAL_TIMER_IT_MODE_E;

typedef enum {
	HAL_TIMER_IT_FLAG_UPDATE,
	HAL_TIMER_IT_FLAG_CH0,
	HAL_TIMER_IT_FLAG_CH1,
	HAL_TIMER_IT_FLAG_CH2,
	HAL_TIMER_IT_FLAG_CH3,
	HAL_TIMER_IT_FLAG_SEAT, //占位方便解析，无意义
	HAL_TIMER_IT_FLAG_TRG,
} HAL_TIMER_IT_FLAG_E;

typedef enum {
	HAL_TIMER_FLAG_UPDATE,
	HAL_TIMER_FLAG_CH0,
	HAL_TIMER_FLAG_CH1,
	HAL_TIMER_FLAG_CH2,
	HAL_TIMER_FLAG_CH3,
	HAL_TIMER_FLAG_SEAT, //占位方便解析，无意义
	HAL_TIMER_FLAG_TRG,
} HAL_TIMER_FLAG_E;

typedef struct {
	uint16_t prescalar;
	HAL_TIMER_ALIGH_MODE_E alignmode;
	HAL_TIMER_CNT_DIR_E direction;
	uint32_t period;
	HAL_TIMER_CLK_DIV_E div_mode;
	HAL_STATUS_E use_auto_reload_shadow;
} HAL_TIMER_BASE_INFO_T;

typedef enum {
	HAL_TIMER_CH0,
	HAL_TIMER_CH1,
	HAL_TIMER_CH2,
	HAL_TIMER_CH3,
} HAL_TIMER_CHANNEL_ID_E;

typedef enum {
	HAL_TIMER_OC_POLARITY_LOW,
	HAL_TIMER_OC_POLARITY_HIGH,
} HAL_TIMER_OC_POLARITY_E;

typedef enum {
	HAL_TIMER_OC_MODE_TIMING,
	HAL_TIMER_OC_MODE_ACTIVE,
	HAL_TIMER_OC_MODE_INACTIVE,
	HAL_TIMER_OC_MODE_TOGGLE,
	HAL_TIMER_OC_MODE_LOW,
	HAL_TIMER_OC_MODE_HIGH,
	HAL_TIMER_OC_MODE_PWM0,
	HAL_TIMER_OC_MODE_PWM1,
} HAL_TIMER_OC_MODE_E;

typedef struct {
	HAL_STATUS_E use_channel;
	HAL_STATUS_E use_oc_shadow;

	HAL_TIMER_OC_POLARITY_E polarity;
	uint32_t pulse;
	HAL_TIMER_OC_MODE_E oc_mode;

} HAL_TIMER_OC_INFO_T;

void hal_timer_base_init(HAL_TIMER_ID_E timerx, HAL_TIMER_BASE_INFO_T *base_info);
void hal_timer_start(HAL_TIMER_ID_E timerx);
void hal_timer_stop(HAL_TIMER_ID_E timerx);
void hal_timer_close(HAL_TIMER_ID_E timerx, HAL_TIMER_IT_MODE_E it_mode);
void hal_timer_it_config(HAL_TIMER_ID_E timerx, HAL_TIMER_IT_MODE_E it_mode);

void hal_timer_oc_init(HAL_TIMER_ID_E timerx, HAL_TIMER_CHANNEL_ID_E channel, HAL_TIMER_OC_INFO_T *oc_info);
void hal_timer_oc_set_pulse(HAL_TIMER_ID_E timerx, HAL_TIMER_CHANNEL_ID_E channel, uint32_t value);
#endif